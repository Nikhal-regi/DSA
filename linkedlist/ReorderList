/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *reverse(ListNode* head){
        ListNode *prev=NULL,*curr=NULL,*ahead=head;
        while(ahead){
            curr=ahead;
            ahead=ahead->next;
            curr->next=prev;
            prev=curr;
        }
        return curr;
    }
    void reorderList(ListNode* head) {
        if(head==NULL || head->next==NULL || head->next->next==NULL) return;

        ListNode *prev=head,*slow=head,*fast=head;
        while(fast!=NULL && fast->next!=NULL){
            prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        //have less element in second half than first.
        ListNode *rev;
        if(fast==NULL){
            prev->next=NULL;
            rev=reverse(slow);
        }else{
            rev=reverse(slow->next);
            slow->next=NULL;
        }

        
        prev=head;
        while(prev && rev){
            ListNode *temp1=prev->next,*temp2=rev->next;
            prev->next=rev;
            rev->next=temp1;
            prev=temp1;
            rev=temp2;
        }
    }
};
