/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    //do merge sort in linked list
    //just save in a vector apply sort then save back in list.
    ListNode* sortList(ListNode* head) {
        if(!head || !(head->next)) return head;
        ListNode *temp=head,*fast=head,*slow=head;
        while(fast !=NULL && fast->next!=NULL){//and operate in while.
            temp=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        temp->next=NULL;
        ListNode *left=sortList(head);
        ListNode *right=sortList(slow);
        return merge(left,right);
    }
    ListNode* merge(ListNode* head1,ListNode* head2){
        ListNode *sol=new ListNode(0);
        ListNode *curr=sol;
        while(head1 && head2){
            if(head1->val<head2->val){
                curr->next=head1;
                head1=head1->next;
            }
            else{
                curr->next=head2;
                head2=head2->next;
            }
            curr=curr->next;
        }
        //dont use while as we know length will ony diff by 1
        if(head1){
            curr->next=head1;
            // head1=head1->next;
            // curr=curr->next;
        }
        if(head2){
            curr->next=head2;
            // head2=head2->next;
            // curr=curr->next;
        }
        curr=sol;
        sol=sol->next;
        curr->next=curr;
        delete curr;
        return sol;
    }
};
