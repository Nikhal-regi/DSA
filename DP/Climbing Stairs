class Solution {
public:
    //memoization

    // int rec(int n,vector<int> &dp){
    //     if(n==0 || n==1) return 1;
    //     //not exactly
    //     if(dp[n]!=-1) return dp[n];
    //     return dp[n]=rec(n-1,dp)+rec(n-2,dp);;
    // }
    // int climbStairs(int n) {
    //     // size first then const number in vector.
    //     vector<int> dp(n+1,-1);//see the constraints.
    //     return rec(n,dp);
    // }
    

    // tabulation
    /*
    int climbStairs(int n) {
        //base cond
        if(n==0 || n==1) return 1;
        vector<int> dp(n+1);
        dp[0]=dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
    */

    //space optimization

    // int climbStairs(int n) {
    //     if(n==0 || n==1) return 1;
    //     int curri,prev=1,prev2=1;
    //     for(int i=2;i<=n;i++){
    //         curri=prev+prev2;
    //         prev2=prev;
    //         prev=curri;
    //     }
    //     return curri;
    // }
};
